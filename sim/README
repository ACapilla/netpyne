%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"m1ms" is an Izhikevich cell-based model of primary motor cortex (M1) which can optionally:
1) be interfaced with a virtual arm and use reinforcement learning to learn to reach a target
2) receive inputs from dorsal premotor cortex (PMd) cells (potentially in real time via Plexon)
3) simulate different types of external stimulation (eg. electrical or optogenetic)

developed by Salvador Dura-Bernal (salvadordura@gmail.com) and Cliff Kerr (cliff@thekerrlab.com) 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

List of main files:

- main.py: Runs the model and reads parameters from command line. eg. "nrniv -python main.py duration=2000 usestdp=0"
After setting the command line input parameters, it calls one of the functions in network.py  (eg. runTuneParams()) which runs the full sequence of functions to execute the model.

- network.py: Contains all the functions that run the network model, including createNetwork(), addStimulation(), addBackground(), setupSim(), runSim(), finalizeSim(), saveData(), plotData(). It also includes functions that call all these functions in sequence (eg. runTuneParams()).

- shared.py: Contains all the model shared parameters and variables, including layer definitions and connectivity. It is imported as "s" from all other files, so that any parameter can be referenced from any file using s.paramName


List of remaining files:

- analysis.py: functions to plot and analyse data

- arm.py: Class containing all the virtual arm, target and RL critic apparatus.

- armGraphs: Supporting functions for the virtual musculoskeletal arm

- arminterface.py: Pipes interface with the virtual musculoskeletal arm

- dummyArm.py: simple virtual arm that can run independently and communicate via UDP

- evol.py: Functions to run evolutionary algorithms (using inspyred) to optimize model parameters

- fileplots.py: Plot graphs from data saved in files

- izhi2007.mod: NMODL definition of Izhikevich 2007 neuron model

- izhi.py: Python wrapper for the different Izhikevich cell types

- nsloc.mod: NMODL for Netstim with location and adapted so interval can be modified during execution (used for proprioceptive and PMd inputs)

- nsloc.py: Python wrapper for NSLOC units

- server.py: Functions to interface the model with Plexon recording system in real time

- simmovie.py: Generate movie of model output

- stdp.mod: NMODL for STDP implementation

- stimuli.py: functions and parameters for differnt types of neural stimulation