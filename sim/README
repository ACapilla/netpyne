%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"m1" is a NEURON/Python-based model of primary motor cortex (M1)

developed by Salvador Dura-Bernal (salvadordura@gmail.com) and Bill Lytton (billl@nuerosim.downstate.edu)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

List of main files:

- main.py: Runs the model and reads parameters from command line. eg. "nrniv -python main.py duration=2000 usestdp=0"
After setting the command line input parameters, it calls one of the functions in network.py  (eg. runTuneParams()) which runs the full sequence of functions to execute the model.

- network.py: Contains all the functions that run the network model, including createNetwork(), addStimulation(), addBackground(), setupSim(), runSim(), finalizeSim(), saveData(), plotData(). It also includes functions that call all these functions in sequence (eg. runTuneParams()).

- shared.py: Contains all the model shared variables and modules (except params.py). It is imported as "s" from all other file, so that any variable or module can be referenced from any file using s.paramName


List of remaining files:

- analysis.py: functions to plot and analyse data

- evol.py: Functions to run evolutionary algorithms (using inspyred) to optimize model parameters

- izhi2007.mod: NMODL definition of Izhikevich 2007 neuron model

- nsloc.mod: NMODL for Netstim with location and adapted so interval can be modified during execution (used for proprioceptive and PMd inputs)

- nsloc.py: Python wrapper for NSLOC units

- stdp.mod: NMODL for STDP implementation

- stimuli.py: functions and parameters for differnt types of neural stimulation