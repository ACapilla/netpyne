* 14jun18 Created repo


** TODO port msarm to M1 model
*** TODO 1) add the input Proprioceptive population, which is actually really a set of netstims with location (NSLOCs), and connect them to layer 2 
*** TODO 2) Add RL: weight changes at synapses, eligibility traces, stdp-like rule, keep track of target location and arm position (receive via udp every 10ms) to calculate error periodically, 
*** TODO 3) Assign SPI subpopulations to different muscles (or maybe just random, which would make more realistic), convert from firing rates to muscle excitation (currently, just sum+threshold), and send udp packet with muscle excitations to arm every 10ms.
***  TODO 4) Assign muscle lengths to the proprioceptive neurons and make them fire accordingly; requires updating muscle lengths every 10ms (via received udp messages)
*** TODO 5) Add the training, testing, and analysis functions
*** TODO decide where plasticity will happen
-should modify the connectivity and weights tuned to M1!?
-maybe avoid by adding plastic connections ONLY between proprioception to L2/3? and SPI to spinal cord interneurons; use spinal cord to project to muscles 
*** TODO Encode target/PMd activity in input to L2/3 or in external noise input patterns 
- PMd poisson from neural field model/SSM?)
- use SSM from Marius, and convert to Poisson(?) a la cliff
- Train with SSM noise for each of the targets
- Test with initial/preparatory  PMd input??



